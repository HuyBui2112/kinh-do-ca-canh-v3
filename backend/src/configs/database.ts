import mongoose from 'mongoose';
import dotenv from 'dotenv';

dotenv.config();

// Interface cho c·∫•u h√¨nh database
interface DatabaseConfig {
  uri: string;
  options: mongoose.ConnectOptions;
}

// C·∫•u h√¨nh database
const databaseConfig: DatabaseConfig = {
  uri: process.env.MONGODB_URI || '',
  options: {
    // C√°c t√πy ch·ªçn k·∫øt n·ªëi MongoDB
    autoIndex: true, // T·ª± ƒë·ªông t·∫°o index
    maxPoolSize: 10, // S·ªë l∆∞·ª£ng k·∫øt n·ªëi t·ªëi ƒëa
    serverSelectionTimeoutMS: 5000, // Th·ªùi gian ch·ªù k·∫øt n·ªëi
    socketTimeoutMS: 45000, // Th·ªùi gian ch·ªù socket
    family: 4 // S·ª≠ d·ª•ng IPv4
  }
};

// H√†m k·∫øt n·ªëi database
export const connectDB = async (): Promise<void> => {
  try {
    if (!databaseConfig.uri) {
      throw new Error('‚ùå MongoDB URI kh√¥ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong bi·∫øn m√¥i tr∆∞·ªùng');
    }

    await mongoose.connect(databaseConfig.uri, databaseConfig.options);
    console.log('üéâ K·∫øt n·ªëi MongoDB th√†nh c√¥ng');

    // X·ª≠ l√Ω s·ª± ki·ªán khi k·∫øt n·ªëi b·ªã ng·∫Øt
    mongoose.connection.on('disconnected', () => {
      console.log('‚ö†Ô∏è MongoDB ƒë√£ ng·∫Øt k·∫øt n·ªëi');
    });

    // X·ª≠ l√Ω s·ª± ki·ªán khi k·∫øt n·ªëi b·ªã l·ªói
    mongoose.connection.on('error', (err) => {
      console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', err);
    });

    // X·ª≠ l√Ω s·ª± ki·ªán khi k·∫øt n·ªëi l·∫°i
    mongoose.connection.on('reconnected', () => {
      console.log('üîÑ ƒê√£ k·∫øt n·ªëi l·∫°i MongoDB');
    });

  } catch (error) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', error);
    process.exit(1);
  }
};

// H√†m ng·∫Øt k·∫øt n·ªëi database
export const disconnectDB = async (): Promise<void> => {
  try {
    await mongoose.disconnect();
    console.log('üëã ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB');
  } catch (error) {
    console.error('‚ùå L·ªói khi ng·∫Øt k·∫øt n·ªëi MongoDB:', error);
    process.exit(1);
  }
}; 